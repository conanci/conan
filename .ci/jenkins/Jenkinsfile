def slaves = ['Linux', 'Windows', 'Macos']

def pyvers 
if (env.BRANCH_NAME =~ /(^release.*)|(^master)/) {
    pyvers = ['py27', 'py34', 'py36']
}
else{
	pyvers = ['py27', 'py36']
}

def win_args   = "conans --verbosity=2 --processes=4 --process-timeout=1000 --with-coverage -a \"!windows_ci_excluded,!rest_api\" "
def linux_args = "conans --verbosity=2 --processes=4 --process-timeout=1000 --with-coverage -a \"!rest_api\""
def macos_args = "conans --verbosity=2 --processes=4 --process-timeout=1000 --debug-log=nose.log -a \"!rest_api\""


def base_tox = """
[tox]
envlist = py27,py34,py36
setenv = CODECOV_TOKEN = "f1a9c517-3d81-4213-9f51-61513111fc28"
# skipsdist=True
# alwayscopy = True

[testenv]
passenv = *
deps = -rconans/requirements.txt
       -rconans/requirements_dev.txt
       -rconans/requirements_server.txt
commands=nosetests {posargs: conans.test}
         - codecov -t f1a9c517-3d81-4213-9f51-61513111fc28
"""

def win_tox = {tmpdir -> """
setenv = CONAN_BASH_PATH = c:/tools/msys64/usr/bin/bash


[testenv:py27]
basepython=C:\\Python27\\python.exe

[testenv:py34]
basepython=C:\\Python34\\python.exe

[testenv:py36]
basepython=C:\\Python36\\python.exe
"""}

def mac_tox = """
[testenv:py27]
basepython=/Users/jenkins_ci/.pyenv/versions/2.7.11/bin/python

[testenv:py34]
basepython=/Users/jenkins_ci/.pyenv/versions/3.4.7/bin/python

[testenv:py36]
basepython=/Users/jenkins_ci/.pyenv/versions/3.6.3/bin/python
"""


def commit
def builders = [:]
for (x in slaves) {
    def slave = x
    for (y in pyvers) {
        def pyver = y
        builders["${slave} - ${pyver}"] = {
            node(slave) {
				stage("${slave} - ${pyver}"){
					def vars = checkout scm
					commit = vars["GIT_COMMIT"].substring(0,3)
					def workdir = "${commit}/${pyver}"
				
					if(slave == "Linux"){
						writeFile(file: "tox.ini", text: base_tox)
						docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${WORKSPACE}") {
							sh(script: "tox --workdir /tmp/${workdir} -e ${pyver} -- ${linux_args}")
						}
					}
					else if(slave == "Windows"){
					    workdir = "${commit}\\${pyver}"
						writeFile(file: "tox.ini", text: base_tox + win_tox("c:\\J\\t\\${workdir}"))
						bat(script: "tox --workdir c:\\J\\t\\${workdir} -e ${pyver} -- ${win_args}")
						bat(script: "rd /s /q \"c:\\J\\t\\${workdir}\"")
					}
					else if(slave == "Macos"){
						writeFile(file: "tox.ini", text: base_tox + mac_tox)
						withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
							sh(script: "tox -e ${pyver} -- ${macos_args}")
						}
						sh(script: "rm -rf /tmp/${workdir}")
					}
				}
            }
        }
    }
}

parallel builders


// Run rest_api_test without concurrency between same node
pyvers = ['py36']
for (y in pyvers) {
    builders = [:]
    def pyver = y
    builders["Windows Rest API Test"] = {
        node("Windows"){
            stage("REST tests Windows ${pyver}"){
                bat(script:"tox --workdir c:\\J\\t\\${commit}/${pyver} -e ${pyver} -- -x conans.test.remote.rest_api_test")
            }
        }
	}
	builders["Linux Rest API Test"] = {
        node("Linux"){
            stage("REST tests Linux ${pyver}"){
                docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${WORKSPACE}") {
                    sh(script: "tox --workdir /tmp/${commit} -e ${pyver} -- -x conans.test.remote.rest_api_test")
                }
            }
        }
	}
	/*builders["Mac Rest API Test"] = {
        node("Macos"){
            stage("REST tests Windows ${pyver}"){
                withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
                    sh(script: "tox --workdir /tmp/${commit} -e ${pyver} -- -x conans.test.remote.rest_api_test")
                }
            }
        }
	}*/ // EXTREMELY SLOW, INVESTIGATE
	parallel builders
}
