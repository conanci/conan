def slaves = ['Linux', 'Windows', 'Macos']
def pyvers = ['py27', 'py34', 'py36']

def win_args   = "conans.test --verbosity=1 --processes=4 --process-timeout=1000 --with-coverage -a \"!windows_ci_excluded,!rest_api\" "
def linux_args = "conans.test --verbosity=1 --processes=4 --process-timeout=1000 --with-coverage"
def macos_args = "conans.test --verbosity=1 --processes=4 --process-timeout=1000 --with-coverage"

def base_tox = """
[tox]
envlist = py27,py34,py36
# skipsdist=True
# alwayscopy = True

[testenv]
passenv = *
deps = -rconans/requirements.txt
       -rconans/requirements_dev.txt
       -rconans/requirements_server.txt
commands=nosetests {posargs: conans.test}
         codecov
"""

def win_tox = """
[testenv:py27]
setenv = CONAN_BASH_PATH = c:\\tools\\msys64\\usr\\bin\\bash
basepython=C:\\Python27\\python.exe

[testenv:py34]
setenv = CONAN_BASH_PATH = c:\\tools\\msys64\\usr\\bin\\bash
basepython=C:\\Python34\\python.exe

[testenv:py36]
setenv = CONAN_BASH_PATH = c:\\tools\\msys64\\usr\\bin\\bash
basepython=C:\\Python36\\python.exe
"""

def mac_tox = """
[testenv:py27]
basepython=/Users/administrator/.pyenv/versions/2.7.11/bin/python

[testenv:py34]
basepython=/Users/administrator/.pyenv/versions/3.4.7/bin/python

[testenv:py36]
basepython=/Users/administrator/.pyenv/versions/3.6.3/bin/python
"""


def builders = [:]
for (x in slaves) {
    def slave = x
    for (y in pyvers) {
        def pyver = y
        builders["${slave} - ${pyver}"] = {
          node(slave) {
            stage("${slave} - ${pyver}"){
                def vars = checkout scm
				println vars
                if(slave == "Macos"){
                    writeFile(file: "tox.ini", text: base_tox + mac_tox)
                }
                else if(slave == "Linux"){
                    writeFile(file: "tox.ini", text: base_tox)
                }
                else if(slave == "Windows"){
                  writeFile(file: "tox.ini", text: base_tox + win_tox)
                }
            
                def stdout
                if(slave == "Linux"){
                    docker.image('lasote/conantests').inside("-e CONAN_USER_HOME=${WORKSPACE}") {
                        sh(script: "tox --workdir /tmp/env${pyver} -e ${pyver} -- ${linux_args}")
                    }
                }
                else if(slave == "Windows"){
                    bat(script: "tox --workdir c:/tmpenv${pyver} -e ${pyver} -- ${win_args}")
                }
                else if(slave == "Macos"){
                    withEnv(['PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin']) {
                        sh(script: "tox -e ${pyver} -- ${macos_args}")
                    }
                }
            }
          }
      }
    }
}

parallel builders


// Run rest_api_test without concurrency
for (y in pyvers) {
    def pyver = y
	node("Windows"){
		stage("REST tests Windows ${pyver}"){
			bat(script:"tox --workdir c:/tmpenv -e ${pyver} -- -x conans.test.remote.rest_api_test")
		}
	}
}